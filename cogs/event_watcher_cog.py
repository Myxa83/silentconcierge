# -*- coding: utf-8 -*-
import aiohttp
import asyncio
import aiofiles
import json
from datetime import datetime
from pathlib import Path
import discord
from discord.ext import commands, tasks
import random
import re

# --------- –û—Å–Ω–æ–≤–Ω–∏–π API —Ç–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ ----------
API_URL = "https://api.playblackdesert.com/WebsiteData/News/GetList"
DETAIL_BASE = "https://www.naeu.playblackdesert.com"
TARGET_CHANNEL_ID = 1324089638880542811
DATA_FILE = Path("data/seen_events.json")
PHRASES_PATH = Path("config/concierge_phrases.json")

# –Ø–∫—â–æ –¥–æ–≤–µ–¥–µ—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–æ–∫—Å—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —á–µ—Ä–µ–∑ VPN)
PROXY = None  # –ø—Ä–∏–∫–ª–∞–¥: "http://127.0.0.1:7890"

DO_NOT_TRANSLATE = [
    "Vell", "Kzarka", "Kutum", "Nouver", "Karanda", "Garmoth", "Offin", "Quint", "Muraka",
    "Gyfin", "Valencia", "Calpheon", "Mediah", "Drieghan", "O'dyllita", "Kamasylvia", "Gr√°na",
    "Cron Stone", "Black Spirit", "Shai", "Corsair", "Berserker", "Musa", "Maehwa", "Guardian",
    "Nova", "Witch", "Wizard", "Hashashin", "Dark Knight", "Sage", "Woosa", "Maegu"
]


class EventWatcherCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.phrases = {}
        self.check_events.start()
        self.bot.loop.create_task(self.load_phrases_on_start())
        self.bot.loop.create_task(self.initial_fetch())
        print("[SilentConcierge] ‚öôÔ∏è EventWatcherCog —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (stable API mode)")

    def cog_unload(self):
        self.check_events.cancel()

    # ------------------- CONFIG / PHRASES -------------------
    async def load_phrases_on_start(self):
        try:
            async with aiofiles.open(PHRASES_PATH, mode="r", encoding="utf-8") as f:
                data = await f.read()
            self.phrases = json.loads(data)
            print("[SilentConcierge] üóÇÔ∏è –§—Ä–∞–∑–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
        except Exception as e:
            print(f"[SilentConcierge] ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—Ä–∞–∑: {e}")
            self.phrases = {
                "intro": ["–í–∏—è–≤–ª–µ–Ω–æ –Ω–æ–≤–∏–π —ñ–≤–µ–Ω—Ç —É –±–∞–∑—ñ Silent Cove."],
                "after_post": ["–Ü–≤–µ–Ω—Ç –¥–æ–¥–∞–Ω–æ –¥–æ –∞—Ä—Ö—ñ–≤—É. –°–∏—Å—Ç–µ–º–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω–æ—é."],
                "notice": ["üéÅ –Ü–≤–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –≤—Å—ñ—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤! –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏."]
            }

    def random_phrase(self, category: str) -> str:
        return random.choice(self.phrases.get(category, ["..."]))

    # ------------------- DATA CACHE -------------------
    def load_seen(self):
        if DATA_FILE.exists():
            try:
                return set(json.loads(DATA_FILE.read_text(encoding="utf-8")))
            except Exception:
                return set()
        return set()

    def save_seen(self, seen):
        DATA_FILE.parent.mkdir(parents=True, exist_ok=True)
        DATA_FILE.write_text(json.dumps(list(seen), ensure_ascii=False, indent=2), encoding="utf-8")

    # ------------------- TRANSLATION -------------------
    def protect_terms(self, text: str):
        protected = {}
        for i, term in enumerate(DO_NOT_TRANSLATE):
            pattern = re.escape(term)
            if re.search(pattern, text, flags=re.IGNORECASE):
                key = f"@@TERM{i}@@"
                protected[key] = term
                text = re.sub(pattern, key, text, flags=re.IGNORECASE)
        return text, protected

    def restore_terms(self, text: str, protected: dict):
        for key, term in protected.items():
            text = text.replace(key, term)
        return text

    async def translate_text(self, text: str):
        text, protected = self.protect_terms(text)
        translated = text
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                async with session.post(
                    "https://libretranslate.com/translate",
                    json={"q": text, "source": "en", "target": "uk", "format": "text"}
                ) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        translated = data.get("translatedText", text)
        except Exception:
            pass
        return self.restore_terms(translated, protected)

    # ------------------- API FETCH -------------------
    async def get_api_events(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —ñ–≤–µ–Ω—Ç—ñ–≤ –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ API BDO."""
        payload = {"boardType": 3, "regionType": 1, "langType": 3, "page": 1}
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=15)) as session:
                async with session.post(API_URL, json=payload, proxy=PROXY) as resp:
                    if resp.status != 200:
                        print(f"[SilentConcierge] ‚ö†Ô∏è API –ø–æ–≤–µ—Ä–Ω—É–≤ HTTP {resp.status}")
                        return []
                    data = await resp.json()
                    events = data.get("Data", {}).get("List", [])
                    if events:
                        print(f"[SilentConcierge] ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(events)} —ñ–≤–µ–Ω—Ç—ñ–≤ –∑ API.")
                    else:
                        print("[SilentConcierge] ‚ö†Ô∏è API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫.")
                    return events
        except aiohttp.ClientConnectorError as e:
            print(f"[SilentConcierge] ‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ ({e}).")
        except Exception as e:
            print(f"[SilentConcierge] ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ API: {e}")
        return []

    # ------------------- MAIN LOOP -------------------
    @tasks.loop(minutes=30)
    async def check_events(self):
        print(f"[DEBUG] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        await self.fetch_latest_events()

    async def fetch_latest_events(self, initial=False):
        events = await self.get_api_events()
        if not events:
            print("[SilentConcierge] ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–≤–µ–Ω—Ç–∏ (API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ).")
            return

        seen = self.load_seen()
        new_posts = []

        for e in events[:5]:
            url = DETAIL_BASE + e.get("DetailUrl", "")
            title = e.get("Title", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
            date = e.get("RegDate", "")[:10]
            thumb = e.get("ThumbnailUrl", "")

            if initial or url not in seen:
                seen.add(url)
                new_posts.append((title, url, date, thumb))

        if not new_posts:
            print("[SilentConcierge] ‚ÑπÔ∏è –ù–æ–≤–∏—Ö —ñ–≤–µ–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î (—É—Å—ñ —É seen).")
            return

        channel = self.bot.get_channel(TARGET_CHANNEL_ID)
        if not channel:
            print("[SilentConcierge] ‚ö†Ô∏è –ö–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        await channel.send(f"<:SilentCove:1425637670197133444> **{self.random_phrase('intro')}**")

        for title, url, date, thumb in reversed(new_posts):
            translated_title = await self.translate_text(title)
            embed = discord.Embed(
                title=f"<:SilentCove:1425637670197133444> {translated_title}",
                description=f"üóì **–î–∞—Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:** {date}\n\nüîó [–î–µ—Ç–∞–ª—ñ –Ω–∞ —Å–∞–π—Ç—ñ]({url})",
                color=0x05B2B4
            )
            if thumb:
                embed.set_image(url=thumb)
            embed.set_author(name="Silent Concierge | –°–∏—Å—Ç–µ–º–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è Silent Cove")
            if self.bot.user:
                embed.set_footer(text="Silent Concierge", icon_url=self.bot.user.display_avatar.url)
            await channel.send(embed=embed)
            await asyncio.sleep(2)

        await channel.send(f"<:SilentCove:1425637670197133444> *{self.random_phrase('after_post')}*")
        self.save_seen(seen)
        print("[SilentConcierge] ‚úÖ –Ü–≤–µ–Ω—Ç–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")

    @check_events.before_loop
    async def before_check_events(self):
        await self.bot.wait_until_ready()

    async def initial_fetch(self):
        await self.bot.wait_until_ready()
        await asyncio.sleep(5)
        print("[SilentConcierge] ‚ñ∂ –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 5 —ñ–≤–µ–Ω—Ç—ñ–≤...")
        await self.fetch_latest_events(initial=True)


async def setup(bot: commands.Bot):
    await bot.add_cog(EventWatcherCog(bot))
    print("‚úÖ Silent Concierge | –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —ñ–≤–µ–Ω—Ç—ñ–≤ (stable API mode) –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.")