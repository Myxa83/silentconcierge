# -*- coding: utf-8 -*-
import os
import random
import discord
from discord.ext import commands
from discord import app_commands, Interaction, SelectOption
from discord.ui import View, Modal, TextInput, Select, Button

# ---------------- CONFIG ----------------
MODERATOR_ROLE_ID = 1375070910138028044  # —Ç–≤—ñ–π ID —Ä–æ–ª—ñ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
FOOTER_TEXT = "Silent Concierge by Myxa"

# ---------------- HELPERS ----------------
def convert_github_blob_to_raw(url: str) -> str:
    """–Ø–∫—â–æ —Ü–µ GitHub blob-–ø–æ—Å–∏–ª–∞–Ω–Ω—è ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ raw. –Ü–Ω–∞–∫—à–µ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —è–∫ —î."""
    if url and "github.com" in url and "/blob/" in url:
        return url.replace("github.com", "raw.githubusercontent.com").replace("/blob/", "/")
    return url

def normalize_image_url(url: str) -> str:
    """–ü—ñ–¥—Ç—Ä–∏–º—É—î –±—É–¥—å-—è–∫—ñ –ø—Ä—è–º—ñ URL (Discord CDN, GitHub raw, Imgur direct —Ç–æ—â–æ)."""
    if not url:
        return None
    url = url.strip()
    url = convert_github_blob_to_raw(url)
    return url if url.lower().startswith(("http://", "https://")) else None

def random_anon_name() -> str:
    """–ì–µ–Ω–µ—Ä—É—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å –¥–ª—è –∞–Ω–æ–Ω—ñ–º–Ω–æ–≥–æ –ø–æ—Å—Ç—É."""
    animals = ["Bee", "Fox", "Otter", "Dove", "Sparrow", "Cat", "Wolf", "Hedgehog", "Lynx"]
    return f"Anonymous {random.choice(animals)} #{random.randint(1, 999):03}"

# ---------------- UI ----------------
class ChannelSelectView(View):
    def __init__(self, bot: commands.Bot):
        super().__init__(timeout=60)
        self.bot = bot
        self.select = Select(placeholder="–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó", min_values=1, max_values=1)

        for channel in bot.get_all_channels():
            if isinstance(channel, discord.TextChannel):
                self.select.append_option(SelectOption(label=channel.name, value=str(channel.id)))

        self.select.callback = self.select_callback
        self.add_item(self.select)

    async def select_callback(self, interaction: Interaction):
        selected_channel_id = int(self.select.values[0])
        await interaction.response.send_modal(PostModal(self.bot, selected_channel_id))

class PostModal(Modal, title="–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç —É –≤–∏–±—Ä–∞–Ω–∏–π –∫–∞–Ω–∞–ª"):
    def __init__(self, bot: commands.Bot, channel_id: int):
        super().__init__(timeout=None)
        self.bot = bot
        self.channel_id = channel_id

        self.text = TextInput(
            label="–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
            style=discord.TextStyle.paragraph,
            required=True,
            placeholder="–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –∞–±–∑–∞—Ü–∏ –π —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ (ìÜü ‚äπ ‡£™ Àñ ‚Ä¶)"
        )
        self.image_url = TextInput(
            label="URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)",
            required=False,
            placeholder="–ü—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ GitHub raw / Discord CDN"
        )
        self.add_item(self.text)
        self.add_item(self.image_url)

    async def on_submit(self, interaction: Interaction):
        channel = self.bot.get_channel(self.channel_id)
        if not channel:
            await interaction.response.send_message("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", ephemeral=True)
            return

        # –ö–Ω–æ–ø–∫–∞ –≤–∏–±–æ—Ä—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó ‚Äî –∞–Ω–æ–Ω—ñ–º–Ω–æ —á–∏ –Ω—ñ
        class AnonChoiceView(View):
            def __init__(self, modal, channel, text, image_url):
                super().__init__(timeout=60)
                self.modal = modal
                self.channel = channel
                self.text = text
                self.image_url = image_url

            @discord.ui.button(label="üïµÔ∏è‚Äç‚ôÄÔ∏è –ê–Ω–æ–Ω—ñ–º–Ω–æ", style=discord.ButtonStyle.secondary)
            async def anon_btn(self, button, i: Interaction):
                await self.send_post(i, anonymous=True)

            @discord.ui.button(label="üë§ –í—ñ–¥ –º–æ–≥–æ —ñ–º–µ–Ω—ñ", style=discord.ButtonStyle.success)
            async def public_btn(self, button, i: Interaction):
                await self.send_post(i, anonymous=False)

            async def send_post(self, i: Interaction, anonymous: bool):
                # –§–æ—Ä–º—É—î–º–æ –µ–º–±–µ–¥
                embed = discord.Embed(description=self.text, color=discord.Color.teal())
                img_url = normalize_image_url(self.image_url)
                if img_url:
                    embed.set_image(url=img_url)

                # –Ø–∫—â–æ –Ω–µ –∞–Ω–æ–Ω—ñ–º–Ω–æ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –∞–≤—Ç–æ—Ä–∞
                if not anonymous:
                    author = i.user
                    author_link = f"https://discord.com/users/{author.id}"
                    embed.add_field(
                        name="–ê–≤—Ç–æ—Ä:",
                        value=f"[{author.display_name}]({author_link})",
                        inline=False
                    )
                    embed.set_thumbnail(url=author.display_avatar.url)
                else:
                    # –ê–Ω–æ–Ω—ñ–º–Ω–∏–π –ø—ñ–¥–ø–∏—Å
                    anon_name = random_anon_name()
                    embed.add_field(
                        name="–ê–≤—Ç–æ—Ä:",
                        value=anon_name,
                        inline=False
                    )

                # –§—É—Ç–µ—Ä ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π
                embed.set_footer(
                    text=FOOTER_TEXT,
                    icon_url=i.client.user.display_avatar.url
                )

                await self.channel.send(embed=embed)
                await i.response.send_message(
                    f"‚úÖ {'–ê–Ω–æ–Ω—ñ–º–Ω–µ ' if anonymous else ''}–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ {self.channel.mention}",
                    ephemeral=True
                )
                self.stop()

        await interaction.response.send_message(
            "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:",
            view=AnonChoiceView(self, channel, self.text.value, self.image_url.value),
            ephemeral=True
        )

# ---------------- COG ----------------
class PostCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @app_commands.command(name="–¥–æ–ø–∏—Å", description="–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç –∑ —Ç–µ–∫—Å—Ç–æ–º —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º —É –≤–∏–±—Ä–∞–Ω–∏–π –∫–∞–Ω–∞–ª")
    async def –¥–æ–ø–∏—Å(self, interaction: Interaction):
        if not any(role.id == MODERATOR_ROLE_ID for role in interaction.user.roles):
            await interaction.response.send_message("‚ùå –õ–∏—à–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å —Ü—ñ—î—é –∫–æ–º–∞–Ω–¥–æ—é.", ephemeral=True)
            return

        view = ChannelSelectView(self.bot)
        await interaction.response.send_message("–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –Ω–∏–∂—á–µ, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç:", view=view, ephemeral=True)

async def setup(bot: commands.Bot):
    await bot.add_cog(PostCog(bot))